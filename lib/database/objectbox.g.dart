// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/meal.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2382562587788776160),
      name: 'Meal',
      lastPropertyId: const IdUid(9, 1102850525236999998),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7891461701966184915),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6612564544770996922),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3550204881584618073),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6049653863618670403),
            name: 'imgUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4049340004862986670),
            name: 'duration',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4894290288299806061),
            name: 'complexity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2512483469090143742),
            name: 'cost',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1714705358935569490),
            name: 'ingredientMeal',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1102850525236999998),
            name: 'stepMeal',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 2382562587788776160),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Meal: EntityDefinition<Meal>(
        model: _entities[0],
        toOneRelations: (Meal object) => [],
        toManyRelations: (Meal object) => {},
        getId: (Meal object) => object.id,
        setId: (Meal object, int id) {
          object.id = id;
        },
        objectToFB: (Meal object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final imgUrlOffset =
              object.imgUrl == null ? null : fbb.writeString(object.imgUrl!);
          final complexityOffset = object.complexity == null
              ? null
              : fbb.writeString(object.complexity!);
          final costOffset =
              object.cost == null ? null : fbb.writeString(object.cost!);
          final ingredientMealOffset = object.ingredientMeal == null
              ? null
              : fbb.writeList(object.ingredientMeal!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final stepMealOffset = object.stepMeal == null
              ? null
              : fbb.writeList(object.stepMeal!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, categoryOffset);
          fbb.addOffset(3, imgUrlOffset);
          fbb.addFloat64(4, object.duration);
          fbb.addOffset(5, complexityOffset);
          fbb.addOffset(6, costOffset);
          fbb.addOffset(7, ingredientMealOffset);
          fbb.addOffset(8, stepMealOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Meal(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              category: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              imgUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              duration: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              complexity: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              cost: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              ingredientMeal: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 18),
              stepMeal: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 20))
            ..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Meal] entity fields to define ObjectBox queries.
class Meal_ {
  /// see [Meal.id]
  static final id = QueryIntegerProperty<Meal>(_entities[0].properties[0]);

  /// see [Meal.name]
  static final name = QueryStringProperty<Meal>(_entities[0].properties[1]);

  /// see [Meal.category]
  static final category = QueryStringProperty<Meal>(_entities[0].properties[2]);

  /// see [Meal.imgUrl]
  static final imgUrl = QueryStringProperty<Meal>(_entities[0].properties[3]);

  /// see [Meal.duration]
  static final duration = QueryDoubleProperty<Meal>(_entities[0].properties[4]);

  /// see [Meal.complexity]
  static final complexity =
      QueryStringProperty<Meal>(_entities[0].properties[5]);

  /// see [Meal.cost]
  static final cost = QueryStringProperty<Meal>(_entities[0].properties[6]);

  /// see [Meal.ingredientMeal]
  static final ingredientMeal =
      QueryStringVectorProperty<Meal>(_entities[0].properties[7]);

  /// see [Meal.stepMeal]
  static final stepMeal =
      QueryStringVectorProperty<Meal>(_entities[0].properties[8]);
}
